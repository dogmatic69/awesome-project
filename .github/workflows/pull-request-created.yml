name: Awesome Project CI

on:
  pull_request:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ['box-api-1', 'box-api-2', 'box-ui']

    steps:
      - uses: actions/checkout@master
      - name: Lint the code
        run: cd ${{ matrix.component }} && make lint
      - name: Lint Failure Output
        if: always()
        run: cat /tmp/output/output.txt || echo "No lint data"
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: "lint-${{ matrix.component }}"
          path: /tmp/output

  lint-terraform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: ['infrastructure', 'permissions', 'services']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@master
      - name: Lint the code
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.13
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: './terraform/${{ matrix.module }}'
          tf_actions_comment: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        component: ['box-api-1', 'box-api-2', 'box-ui']
    steps:
      - uses: actions/checkout@master
      - name: Test the component
        run: cd ${{ matrix.component }} && make test
      - name: Test Results
        if: always()
        run: cat /tmp/output/output.txt || echo "No test data"
      - uses: actions/upload-artifact@v1
        if: always()
        with:
            name: "test-${{ matrix.component }}"
            path: /tmp/output

  scan:
    name: docker security scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ['box-api-1', 'box-api-2', 'box-ui']
    steps:
      - uses: actions/checkout@master
      - name: Scan the docker image
        run: cd ${{ matrix.component }} && make scan
      - name: Vulnerability Report
        if: failure()
        run: cat /tmp/scan/output/output.txt || echo "No scan data"
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: "scan-${{ matrix.component }}"
          path: /tmp/scan/output

  publish-docker:
    runs-on: ubuntu-latest
    needs: [test, scan]
    strategy:
      matrix:
        component: ['box-api-1', 'box-api-2', 'box-ui']
    steps:
    - uses: actions/checkout@master
    - name: publish the package
      run: |
        cd ${{ matrix.component }}
        echo ${{ secrets.GITHUB_TOKEN }} | docker login -u ${{ github.actor }} --password-stdin docker.pkg.github.com
        DOCKER_IMAGE=${{ matrix.component }} make publish-docker

  # publish-npm:
  #   runs-on: ubuntu-latest
  #   # needs: [test, scan]
  #   strategy:
  #     matrix:
  #       component: ['box-api-1']
  #   steps:
  #   - uses: actions/checkout@master
  #   - name: publish the package
  #     run: |
  #       yarn config set _authToken ${{ secrets.GITHUB_TOKEN }}
  #       echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> "${{ matrix.component }}/files/src/.npmrc"
  #       cp "${{ matrix.component }}/files/src/.npmrc" ~/.npmrc
  #       make -C ${{ matrix.component }} publish-npm NODE_PATH=./files/src/

  # slack:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@master
  #   - name: Slack Notification
  #     uses: rtCamp/action-slack-notify@master
  #     env:
  #       SLACK_CHANNEL: carls-test-channel
  #       SLACK_COLOR: '#3278BD'
  #       SLACK_ICON: https://github.com/rtCamp.png?size=48
  #       SLACK_MESSAGE: 'Post Content :rocket:'
  #       SLACK_TITLE: PR ready for review
  #       SLACK_USERNAME: PR Bot
  #       SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
